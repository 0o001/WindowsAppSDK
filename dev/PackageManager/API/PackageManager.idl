// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.

//import "windows.foundation.idl";
//import "Windows.Management.Deployment.idl";
//import "Microsoft.Windows.ApplicationModel.winmd;"

//import "Windows.ApplicationModel.idl";
import "M.AM.DynamicDependency.idl";
//import "Microsoft.Windows.ApplicationModel.DynamicDependency.winmd";

//import "Windows.Management.Deployment.idl";

namespace Microsoft.Windows.Management.Deployment
{
    [contractversion(1)]
    apicontract PackageDeploymentContract{};

    // How should we handle deployment operations?
    [contract(PackageDeploymentContract, 1)]
    enum DeploymentProcessingModel
    {
        Sequential,
        Parallel
    };

    // Do deployment operations need non-default priority?
    [contract(PackageDeploymentContract, 1)]
    enum DeploymentPriority
    {
        Low,
        Normal,
        Immediate
    };

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSetItem
    {
        PackageSetItem();

        // Unique id
        String Id;

        // Source where a package can be retrieved from if/when needed for install, remediation, etc
        Windows.Foundation.Uri PackageUri;

        // Package criteria to identify if a matching package is ready for use and to use at runtime
        String PackageFamilyName;
        Windows.ApplicationModel.PackageVersion MinVersion;
//TODO        Microsoft.Windows.ApplicationModel.ProcessorArchitectures ProcessorArchitectureFilter;
        Windows.Management.Deployment.PackageTypes PackageTypeFilter;

        DeploymentProcessingModel DeploymentProcessingModel;

        DeploymentPriority DeploymentPriority;

        // ??? Additional info potentially needed for deployment operations
        //TODO �see AddPackageOptions�
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSet
    {
        // Unique id
        String Id;

        // Package(s) in the set
        IVector<PackageSetItem> PackageSetItems;
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass FindPackageSetOptions
    {
        FindPackageSetOptions();

        //TODO
        Boolean TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder;
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSetManager
    {
        static PackageSetManager GetDefault();

        void Add(PackageSet packageSet);  		                    // Create/Write/Save
        void Update(PackageSet packageSet);  		                // Update/Write/Save
        void Remove(String packageSetId);		                    // Delete
        PackageSet Get(String packageSetId);		                // Read/Load
        IVector<PackageSet> Find(FindPackageSetOptions options);    // Enumerate
    };

    [contract(PackageDeploymentContract, 1)]
    enum PackageDeploymentProgressState
    {
        Queued = 0,
        Processing = 1
    };

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentProgress
    {
        PackageDeploymentProgressState State { get; };
        UInt32 Percentage { get; };
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentResult
    {
        Guid ActivityId { get; };
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass AddPackageSetOptions
    {
        AddPackageSetOptions();

        //TODO
        Boolean TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder;
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentManager
    {
        // Get an instance of the manager
        static PackageDeploymentManager GetDefault();

        // Return true if the package set are present and available for use
        Boolean IsReady(String packageSetId);

        // Check if the necessary package(s) needed by the scenario are present
        // and available for use and if not then Make It So.
        // If the necessary packages(s) are not present on the system
        // then make them available (download, install, etc).
        // If the necessary AI Models are present and available this is equivalent to IsReady(id).
        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        EnsureIsReadyAsync(String packageSetId);

        // Add packages in a set
        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        AddPackageSetAsync(PackageSet packageSet, AddPackageSetOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        AddPackageSetByIdAsync(String packageSetId, AddPackageSetOptions options);

        // Ditto PackageSet operations of Remove, Repair, Reset
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageRuntimeManager
    {
        // Get an instance of the manager
        static PackageRuntimeManager GetDefault();

        // Make the package(s) in the package set available to the calling process
        // i.e. dynamically add the package(s) in the package set to the caller's package graph.
        // This is equivalent to
        //   FOREACH p IN PackageSetManager.Get(id).PackageSetItems
        //       pd = TryCreatePackageDependency(p)
        //       AddPackageDependency(pd)

        void AddPackageSetByIdToPackageGraph(String packageSetId);

        void AddPackageSetToPackageGraph(PackageSet packageSet);
    }
}
