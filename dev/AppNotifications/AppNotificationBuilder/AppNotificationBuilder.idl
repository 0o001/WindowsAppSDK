namespace Microsoft.Windows.AppNotifications.Builder
{
    runtimeclass Text
    {
        Text(String content);
        Text(String content, Int32 maxLines);

        // The target locale of the XML payload, specified as a BCP-47 language tags.
        Text SetLanguage(String language);

        // Center the text for incoming call notifications. This value is only used for notifications with with a scenario value of IncomingCall.
        Text UseCallScenarioAlign();

        // Displays text at the bottom of your notification, along with your app's identity or the notification's timestamp.
        // On older versions of Windows that don't support attribution text, the text will simply be displayed as another text element.
        Text UseAttributionText();

        // Retrieves the XML content of the Text.
        String GetXml();
    };

    enum ImagePlacement
    {
        Inline, // The default value, a full-width inline-image that appears when you expand the AppNotification.
        AppLogoOverride, // An image that is left-aligned with notification text
        Hero, // Prominently displays image within the AppNotification banner and while inside Notification Center.
    };

    runtimeclass Image
    {
        Image(Windows.Foundation.Uri imageUri);

        // A description of the image, for users of assistive technologies.
        Image SetAlternateText(String alternateText);

        // An enum to describe how the image will be cropped.
        Image UseCircleCrop();

        // Override the app logo with custom image of choice that will be displayed on the AppNotification, otherwise it will be an inline image.
        Image SetImagePlacement(ImagePlacement placement);
        ImagePlacement GetImagePlacement();

        // Retrieves the XML content of the image.
        String GetXml();
    };

    enum ButtonStyle
    {
        Default, // Button will be the default color
        Success, // The button will be green
        Critical, // The button will be red
    };

    runtimeclass Button
    {
        // Button can use ToolTip instead of content which requires empty content.
        Button();
        Button(String content);

        // Adds a key/value pair to the arguments of the button
        Button AddArgument(String key, String value);

        // Sets the IconUri for the button.
        Button SetIconUri(Windows.Foundation.Uri iconUri);

        // The tooltip for a button, if the button has an empty content string.
        Button SetToolTip(String toolTip);

        // Sets the Button as context menu action.
        Button UseContextMenuPlacement(); // AllowContextMenuPlacement

        // Sets the ButtonStyle to Success or Critical
        Button SetButtonStyle(ButtonStyle buttonStyle);

        // Sets the ID of an existing TextBox in order to have this button display to the right of the input.
        Button SetInputId(String inputId);

        // Launches the URI passed into the button when activated.
        Button SetProtocolActivation(Windows.Foundation.Uri protocolUri);
        Button SetProtocolActivation(Windows.Foundation.Uri protocolUri, String targetApplicationPfn);

        // Retrieves the XML content of the button.
        String GetXml();
    };

    enum ScenarioType
    {
        Default, // The normal AppNotification behavior. The AppNotification appears for a short duration, and then automatically dismisses into Notification Center.
        Reminder, // The notification will stay on screen until the user dismisses it or takes action.
        Alarm,    // Alarms behave like Reminder, but alarms will additionally loop audio with a default alarm sound.
        IncomingCall, // Incoming call notifications are displayed pre-expanded in a special call format and stay on the user's screen till dismissed.
        Urgent, // Important notifications allow users to have more control over what 1st party and 3rd party apps can send them high-priority AppNotifications (urgent/important) that can break through Focus Assist.
    };

    enum Duration
    {
        Short, // Default value. AppNotification appears for a short while and then goes into Notification Center.
        Long, // AppNotification stays on-screen for longer, and then goes into Notification Center.
    };

    runtimeclass AppNotificationContent
    {
        AppNotificationContent();

        //// Adds arguments to the launch attribute to return when AppNotification is clicked.
        //AppNotificationContent AddArgument(String key, String value);

        //// Sets the timeStamp of the AppNotification to when it was constructed instead of when it was sent.
        //AppNotificationContent SetTimeStamp(Windows.Foundation.DateTime timeStamp);

        //// Sets the scenario of the AppNotification.
        //AppNotificationContent SetScenarioType(ScenarioType scenarioType);

        // Adds text to the AppNotification with a Text component.
        AppNotificationContent AddText(Text text);

        // Adds a button to the AppNotificationContent
        AppNotificationContent AddButton(Button button);

        // Add an image to the AppNotificationContent.
        AppNotificationContent AddImage(Image image);

        // Retrieves the notification XML content so that it can be used with a local
        // AppNotification constructor.
        String GetXml();

        // Build map after retrieving arguments from AppActivatedEventArgs
        // static Windows.Foundation.Collections.IMap<String, String> DeserializeArguments(String argumentString);
    };
}
