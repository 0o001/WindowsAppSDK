name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
variables:
- template: WindowsAppSDK-Versions.yml
- template: WindowsAppSDK-CommonVariables.yml
- name: buildPool
  value: 'ProjectReunionESPool-2022'

parameters:
  - name: "ReleaseSigning"
    type: boolean
    default: False
  - name: "IgnoreFailures"
    type: boolean
    default: False
  - name: "PublishPackage"
    type: boolean
    default: False
  - name: "WindowsAppRuntimeInsightsSourceDirectory"
    type: string
    default: $(Build.SourcesDirectory)\dev\WindowsAppRuntime_Insights
  - name: "GenerateSBOM"
    type: boolean
    default: False
  - name: "RunSDLBinaryAnalysis"
    displayName: "Run SDL's Binary Analysis (PREFast, BinSkim)"
    type: boolean
    default: False
  - name: "enablePREFast"
    type: boolean
    default: true

resources:
  repositories:
  - repository: templates_onebranch
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

jobs:
# # This relatively low-cost job is always run, in parallel w/ the Build job.
# - template: AzurePipelinesTemplates\WindowsAppSDK-SourceAnalysis-job.yml

# - job: VerifyCopyrightHeaders
#   dependsOn: []
#   pool: ProjectReunionESPool-2022
#   steps:
#   - task: powershell@2
#     displayName: 'Verify copyright headers'
#     inputs:
#       targetType: filePath
#       filePath: tools\VerifyCopyrightHeaders.ps1

- job: Build
  # dependsOn:
  #   - VerifyCopyrightHeaders
  # Skip the build job if we are reusing the output of a previous build.
  # useBuildOutputFromBuildId variable is set on the Pipeline at Queue time.
  # condition: |
  #   and
  #   (
  #     eq(variables['useBuildOutputFromBuildId'],''),
  #     in(dependencies.VerifyCopyrightHeaders.result, 'Succeeded')
  #   )
  pool: ProjectReunionESPool-2022
  steps:
  - task: NuGetToolInstaller@1

  - task: NuGetAuthenticate@0
    inputs:
      nuGetServiceConnections: 'TelemetryInternal'

  - template: WindowsAppSDK-PopulateBuildDateAndRevision-Steps.yml

  # The environment variable VCToolsInstallDir isn't defined on lab machines, so we need to retrieve it ourselves.
  - script: |
      "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -Latest -requires Microsoft.Component.MSBuild -property InstallationPath > %TEMP%\vsinstalldir.txt
      set /p _VSINSTALLDIR15=<%TEMP%\vsinstalldir.txt
      del %TEMP%\vsinstalldir.txt
      call "%_VSINSTALLDIR15%\Common7\Tools\VsDevCmd.bat"
      echo VCToolsInstallDir = %VCToolsInstallDir%
      echo ##vso[task.setvariable variable=VCToolsInstallDir]%VCToolsInstallDir%
    displayName: 'Retrieve VC tools directory'

  - task: CmdLine@1
    displayName: 'Display build machine environment variables'
    inputs:
      filename: 'set'

  - task: NuGetAuthenticate@0
    inputs:
      nuGetServiceConnections: 'WindowsES'

  - task: powershell@2
    displayName: 'Create test pfx to sign MSIX test packages (DevCheck)'
    inputs:
      targetType: filePath
      filePath: tools\DevCheck.ps1
      arguments: -NoInteractive -Offline -Verbose -CertPassword 'BuildPipeline' -CheckTestPfx -Clean
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: powershell@2
    displayName: 'Create DynamicDependencies TerminalVelocity features'
    inputs:
      targetType: filePath
      filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
      arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DynamicDependency.xml -Channel ${{ parameters.channel }} -Language C++ -Namespace Microsoft.Windows.ApplicationModel.DynamicDependency -Output $(Build.SourcesDirectory)\dev\common\MddTerminalVelocityFeatures.h
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: powershell@2
    displayName: 'Create DeploymentAPI TerminalVelocity features'
    inputs:
      targetType: filePath
      filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
      arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DeploymentAPI.xml -Channel ${{ parameters.channel }} -Language C++ -Namespace Microsoft.Windows.ApplicationModel.WindowsAppRuntime -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DeploymentAPI.h
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: powershell@2
    displayName: 'Create AppNotifications TerminalVelocity features'
    inputs:
      targetType: filePath
      filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
      arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-AppNotifications.xml -Channel ${{ parameters.channel }} -Language C++ -Namespace Microsoft.Windows.AppNotifications -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-AppNotifications.h
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: powershell@2
    displayName: 'Create PushNotifications TerminalVelocity features'
    inputs:
      targetType: filePath
      filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
      arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-PushNotifications.xml -Channel ${{ parameters.channel }} -Language C++ -Namespace Microsoft.Windows.PushNotifications -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-PushNotifications.h
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: powershell@2
    displayName: 'Create EnvironmentManager TerminalVelocity features'
    inputs:
      targetType: filePath
      filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
      arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-EnvironmentManager.xml -Channel ${{ parameters.channel }} -Language C++ -Namespace Microsoft.Windows.System -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-EnvironmentManager.h
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: powershell@2
    name: UpdateTraceloggingConfig
    inputs:
      targetType: 'inline'
      script: |
        $srcPath = Get-Childitem -Path 'dev\WindowsAppRuntime_Insights\packages' -File 'MicrosoftTelemetry.h' -Recurse

        if (($srcPath -ne $null)){
          $destinationPaths = Get-Childitem -Path 'packages' -File 'Traceloggingconfig.h' -Recurse

          if (($destinationPaths -ne $null)) {
            foreach ($destPath in $destinationPaths) {
              Write-Host 'SourcePath:' $srcPath.FullName
              Write-Host 'DestinationPath:' $destPath.FullName
              Copy-Item -Force $srcPath.FullName $destPath.FullName
            }
          }
        }

  - task: PowerShell@2
    name: SetVersion
    displayName: Update metapackage version
    inputs:
      targetType: 'inline'
      script: |
        $packageVersion = '$(version)'
        $pipelineType = '$(PipelineType)'
        $sourceBranchName = '$(Build.SourceBranchName)'
        if ($sourceBranchName -eq 'main' -or $sourceBranchName -eq 'develop')
        {
          $packageVersion = $packageVersion + '.' + $sourceBranchName + '.' + $pipelineType
        }
        Write-Host "##vso[task.setvariable variable=packageVersion;]$packageVersion"
        Write-Host "##vso[task.setvariable variable=packageVersion;isOutput=true;]$packageVersion"
        Write-Host $packageVersion
        [xml]$publicNuspec = Get-Content -Path $(Build.SourcesDirectory)\build\NuSpecs\Microsoft.WindowsAppSDK.Foundation.nuspec
        $publicNuspec.package.metadata.version = $packageVersion
        Set-Content -Value $publicNuspec.OuterXml $(Build.SourcesDirectory)\build\NuSpecs\Microsoft.WindowsAppSDK.Foundation.nuspec

  - task: PowerShell@2
    name: BuildBinaries
    inputs:
      filePath: 'BuildTransportPackage.ps1'
      arguments: -Platform "arm64,x86,x64" -Configuration "release" -AzureBuildStep "BuildBinaries"

  - task: PowerShell@2
    name: PackNuget
    inputs:
      filePath: 'BuildTransportPackage.ps1'
      arguments: -Platform "arm64,x86,x64" -Configuration "release" -AzureBuildStep "PackNuget"

# # Publish
# - job: Publish
#   dependsOn: 
#   - CreateNugetPackage
#   # - WinAppSDKIntegrationBuildAndTest
#   condition: or(succeeded(), eq(${{ parameters.IgnoreFailures }}, 'true'))
#   pool: ProjectReunionESPool-2022
#   variables:
#     WindowsAppSDKPackageVersion: $[ dependencies.CreateNugetPackage.outputs['SetVersion.packageVersion'] ]
#   steps:
#     - task: DownloadBuildArtifacts@0
#       inputs:
#         artifactName: FullNuget
#         downloadPath: '$(Build.SourcesDirectory)'
#         itemPattern: |
#           **/*.nupkg

#     - ${{ if or(eq(variables['Build.Reason'], 'Schedule'), eq(parameters.PublishPackage, 'true')) }}:
#       # this mysterious guid fixes the "NuGetCommand@2 is ambiguous" error :-(
#       - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
#         displayName: 'NuGet push to ProjectReunion.nuget.internal'
#         inputs:
#           command: 'push'
#           packagesToPush: '$(Build.SourcesDirectory)/FullNuget/*.nupkg;!$(Build.SourcesDirectory)/FullNuget/*.symbols.nupkg'
#           verbosityPush: 'Detailed'
#           nuGetFeedType: 'internal'
#           #Note: The project qualifier is always required when using a feed name. Also, do not use organization scoped feeds.
#           publishVstsFeed: 'ProjectReunion/Project.Reunion.nuget.internal'

#       - template: ..\eng\common\AzurePipelinesTemplates\Maestro-PublishBuildToMaestro-Steps.yml
#         parameters:
#           AssetNames: 'Microsoft.WindowsAppSDK.Foundation.TransportPackage'
#           AssetVersions: $(WindowsAppSDKPackageVersion)
#           TriggerSubscription: true
