parameters:
- name: "publishToMaestro"
  type: boolean
  default: False
- name: "IgnoreFailures"
  type: boolean
  default: False
- name: "SignOutput"
  type: boolean
  default: False

stages:
- stage: TransportPackage
  jobs:
  - job: BuildBinaries
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      type: windows
    strategy:
      maxParallel: 10
      matrix:
        Release_x86:
          buildPlatform: 'x86'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
          PGOBuildMode: 'Optimize'
        Release_x64:
          buildPlatform: 'x64'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
          PGOBuildMode: 'Optimize'
        Release_Arm64:
          buildPlatform: 'arm64'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
    variables:
      # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and
      # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\TestingArtifact\**;-|**\BuildOutput\**'
      ob_artifactSuffix: '_$(buildConfiguration)_$(buildPlatform)'
    steps:
    - template: WindowsAppSDK-BuildBinaries-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}

  - job: BuildBinaries_Release_anycpu
    # For now, this job just builds Microsoft.WindowsAppRuntime.Bootstrap.Net.dll in AnyCPU
    # Can be expanded to add any other binary as needed
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      type: windows
    variables:
      # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and
      # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\TestingArtifact\**;-|**\BuildOutput\**'
    steps:
    - template: WindowsAppSDK-BuildBinaries-AnyCPU-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}

  - job: BuildAndTestMRT
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      type: windows
    timeoutInMinutes: 120
    strategy:
      maxParallel: 10
      matrix:
        Release_x86:
          buildPlatform: 'x86'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
          PGOBuildMode: 'Optimize'
        Release_x64:
          buildPlatform: 'x64'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
          PGOBuildMode: 'Optimize'
        Release_Arm64:
          buildPlatform: 'arm64'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
    variables:
      # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and
      # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\TestingArtifact\**;-|**\BuildOutput\**'
      ob_artifactSuffix: '_$(buildConfiguration)_$(buildPlatform)'
    steps:
    - template: AzurePipelinesTemplates\WindowsAppSDK-BuildAndTestMRT-Steps.yml
      parameters:
        SignOutput: ${{ parameters.SignOutput }}

  - job: NugetPackage
    pool: ProjectReunionESPool-2022
    timeoutInMinutes: 120
    dependsOn:
    - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
      - TestInHelix
    - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
      - Build
      - BuildAnyCPU
      - BuildAndTestMRT
    condition: or(succeeded(), eq(${{ parameters.IgnoreFailures }}, 'true'))
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Foundation x64'
      inputs:
        artifactName: "drop_TransportPackage_BuildBinaries_Release_x64"
        targetPath: '$(Build.SourcesDirectory)\BuildOutput'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Foundation x86'
      inputs:
        artifactName: "drop_TransportPackage_BuildBinaries_Release_x86"
        targetPath: '$(Build.SourcesDirectory)\BuildOutput'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Foundation arm64'
      inputs:
        artifactName: "drop_TransportPackage_BuildBinaries_Release_arm64"
        targetPath: '$(Build.SourcesDirectory)\BuildOutput'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Foundation arm64'
      inputs:
        artifactName: "drop_TransportPackage_BuildBinaries_Release_anycpu"
        targetPath: '$(Build.SourcesDirectory)\BuildOutput'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Foundation x64'
      inputs:
        artifactName: "drop_TransportPackage_BuildAndTestMRTs_Release_x64"
        targetPath: '$(Build.SourcesDirectory)\BuildOutput'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Foundation x86'
      inputs:
        artifactName: "drop_TransportPackage_BuildAndTestMRT_Release_x86"
        targetPath: '$(Build.SourcesDirectory)\BuildOutput'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Foundation arm64'
      inputs:
        artifactName: "drop_TransportPackage_BuildAndTestMRT_Release_arm64"
        targetPath: '$(Build.SourcesDirectory)\BuildOutput'

    - task: PowerShell@2
      name: StageFiles
      inputs:
        filePath: 'BuildAll.ps1'
        arguments: -Platform "x86,x64,arm64" -Configuration "release" -AzureBuildStep "StageFiles"

    - task: CopyFiles@2
      displayName: 'Copy symbols to artifact staging directory'
      condition: always()
      inputs:
        sourceFolder: $(Build.SourcesDirectory)\BuildOutput\FullNuget
        contents: |
          **\*.pdb
        targetFolder: $(Build.ArtifactStagingDirectory)\symbols

    - task: PublishSymbols@2
      displayName: 'Publish private symbols to internal server (without source indexing)'
      inputs:
        searchPattern: '$(Build.ArtifactStagingDirectory)\symbols\**\*.pdb'
        symbolServerType: 'TeamServices'
      # This ADO task does not support indexing of github sources currently :-(
        indexSources: false
        detailedLog: true
      # There is a bug which causes this task to fail if LIB includes an inaccessible path (even though it does not depend on it).
      # To work around this issue, we just force LIB to be any dir that we know exists.
      env:
        LIB: $(Build.SourcesDirectory)

    - task: PublishSymbols@2
      displayName: 'Publish symbols to public server(without source indexing)'
      inputs:
        searchPattern: '$(Build.ArtifactStagingDirectory)\symbols\**\*.pdb'
        symbolServerType: 'TeamServices'
      # This ADO task does not support indexing of github sources currently :-(
        indexSources: false
        detailedLog: true
      # There is a bug which causes this task to fail if LIB includes an inaccessible path (even though it does not depend on it).
      # To work around this issue, we just force LIB to be any dir that we know exists.
      env:
        LIB: $(Build.SourcesDirectory)
        ArtifactServices_Symbol_AccountName: microsoftpublicsymbols
        ArtifactServices_Symbol_PAT: $(WinSDKLab_microsoftpublicsymbols_PAT)

    - task: PowerShell@2
      name: SetVersion
      displayName: Update metapackage version
      inputs:
        targetType: 'inline'
        script: |
          $packageVersion = '$(version)'
          $pipelineType = '$(PipelineType)'
          $sourceBranchName = '$(Build.SourceBranchName)'
          if ($sourceBranchName -eq 'main' -or $sourceBranchName -eq 'develop')
          {
            $packageVersion = $packageVersion + '.' + $sourceBranchName + '.' + $pipelineType
          }
          Write-Host "##vso[task.setvariable variable=packageVersion;]$packageVersion"
          Write-Host "##vso[task.setvariable variable=packageVersion;isOutput=true;]$packageVersion"

          Write-Host $packageVersion
          [xml]$publicNuspec = Get-Content -Path $(Build.SourcesDirectory)\build\NuSpecs\Microsoft.WindowsAppSDK.Foundation.nuspec
          $publicNuspec.package.metadata.version = $packageVersion
          Set-Content -Value $publicNuspec.OuterXml $(Build.SourcesDirectory)\build\NuSpecs\Microsoft.WindowsAppSDK.Foundation.nuspec

    - task: PowerShell@2
      name: PackNuget
      inputs:
        filePath: 'BuildAll.ps1'
        arguments: -Platform "x64" -Configuration "release" -AzureBuildStep "PackNuget" -OutputDirectory "$(build.artifactStagingDirectory)\FullNuget" -PackageVersion "$(packageVersion)"

    - task: EsrpCodeSigning@2
      inputs:
        ConnectedServiceName: 'Project Reunion ESRP Code Signing Connection'
        FolderPath: $(build.artifactStagingDirectory)\FullNuget
        Pattern: 'Microsoft.WindowsAppSDK.Foundation*.nupkg'
        UseMinimatch: true
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
            {
              "KeyCode" : "CP-401405",
              "OperationCode" : "NuGetSign",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
            },
            {
                "KeyCode" : "CP-401405",
                "OperationCode" : "NuGetVerify",
                "Parameters" : {},
                "ToolName" : "sign",
                "ToolVersion" : "1.0"
            }
          ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
      condition:
        eq(${{ parameters.SignOutput }}, true)

    - task: CopyFiles@2
      displayName: MoveToOutputDirectory
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\BuildOutput\FullNuget'
        TargetFolder: '$(ob_outputDirectory)\NugetContent'

    - task: CopyFiles@2
      displayName: MoveToOutputDirectory
      inputs:
        SourceFolder: '$(build.artifactStagingDirectory)\FullNuget'
        TargetFolder: '$(ob_outputDirectory)\TransportPackage'