parameters:
- name: "publishToMaestro"
  type: boolean
  default: False
- name: "IgnoreFailures"
  type: boolean
  default: False
- name: "SignOutput"
  type: boolean
  default: False

stages:
- stage: TransportPackage
  jobs:
  - job: BuildBinaries
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      type: windows
    strategy:
      maxParallel: 10
      matrix:
        Release_x86:
          buildPlatform: 'x86'
          buildConfiguration: 'release'
          normalizedConfiguration: 'fre'
          PGOBuildMode: 'Optimize'
        Release_x64:
          buildPlatform: 'x64'
          buildConfiguration: 'release'
          normalizedConfiguration: 'fre'
          PGOBuildMode: 'Optimize'
        Release_Arm64:
          buildPlatform: 'arm64'
          buildConfiguration: 'release'
          normalizedConfiguration: 'fre'
    variables:
      # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and
      # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\TestingArtifact\**;-|**\BuildOutput\**'
      ob_artifactSuffix: '_$(buildConfiguration)_$(buildPlatform)'
    steps:
    - template: WindowsAppSDK-BuildBinaries-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}

  - job: BuildBinaries_release_anycpu
    # For now, this job just builds Microsoft.WindowsAppRuntime.Bootstrap.Net.dll in AnyCPU
    # Can be expanded to add any other binary as needed
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      type: windows
    variables:
      # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and
      # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\TestingArtifact\**;-|**\BuildOutput\**'
    steps:
    - template: WindowsAppSDK-BuildBinaries-AnyCPU-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}

  - job: BuildAndTestMRT
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      type: windows
    timeoutInMinutes: 120
    strategy:
      maxParallel: 10
      matrix:
        Release_x86:
          buildPlatform: 'x86'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
          PGOBuildMode: 'Optimize'
        Release_x64:
          buildPlatform: 'x64'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
          PGOBuildMode: 'Optimize'
        Release_Arm64:
          buildPlatform: 'arm64'
          buildConfiguration: 'Release'
          normalizedConfiguration: 'fre'
    variables:
      # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and
      # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\TestingArtifact\**;-|**\BuildOutput\**'
      ob_artifactSuffix: '_$(buildConfiguration)_$(buildPlatform)'
    steps:
    - template: WindowsAppSDK-BuildAndTestMRT-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}

  # Arm64 uses a different VM type than x64, thus requiring them to be in different
  # pools, hence, we spilt the two scenarios into separate jobs.
  - template: WindowsAppSDK-RunTestsInPipeline-Job.yml
    parameters:
      jobName: PipelineTestsX64
      isArm64Platfrom: false
      dependsOn:
        - BuildBinaries
        - BuildAndTestMRT

  - template: WindowsAppSDK-RunTestsInPipeline-Job.yml
    parameters:
      jobName: PipelineTestsArm64
      isArm64Platfrom: true
      dependsOn:
        - BuildBinaries
        - BuildAndTestMRT

  - job: NugetPackage
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      type: windows
    timeoutInMinutes: 120
    dependsOn:
      - BuildBinaries
      - BuildBinaries_release_anycpu
      - BuildAndTestMRT
    condition: or(succeeded(), eq(${{ parameters.IgnoreFailures }}, 'true'))
    variables:
      # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and
      # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\TestingArtifact\**;-|**\BuildOutput\**'
    steps:
    - template: WindowsAppSDK-PackNuget-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}
