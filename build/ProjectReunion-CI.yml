# see https://docs.microsoft.com/azure/devops/pipelines/process/phases for info on yaml ADO jobs
name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
variables:
- template: WindowsAppSDK-Versions.yml
- template: WindowsAppSDK-CommonVariables.yml
- name: buildOutputDir
  value: $(Build.SourcesDirectory)\BuildOutput
- name: buildPool
  value: 'windows-2019'

parameters:
  - name: runSDLBinaryAnalysis
    displayName: "Run SDL's Binary Analysis (PREFast, BinSkim)"
    type: boolean
    default: false
  - name: enablePREFast
    type: boolean
    default: true

resources:
  repositories:
  - repository: templates_onebranch
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

jobs:
- job: PreChecks
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: PowerShell@2
    displayName: 'Smoke test props and targets in \build\NuSpecs'
    inputs:
      targetType: 'inline'
      script: |
        $targetPaths = "$(Build.SourcesDirectory)\build\NuSpecs\*.targets"
        $propPaths = "$(Build.SourcesDirectory)\build\NuSpecs\*.props"
        Get-ChildItem $targetPaths | ForEach-Object { $_.Name; [xml](Get-Content $_) | Out-Null }
        Get-ChildItem $propPaths | ForEach-Object { $_.Name; [xml](Get-Content $_) | Out-Null }
      failOnStderr: true

- template: AzurePipelinesTemplates\WindowsAppSDK-SourceAnalysis-job.yml

- job: Build
  dependsOn: []
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  strategy:
    maxParallel: 10
    matrix:
      Debug_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Debug'
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
        PGOBuildMode: 'Optimize'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
        PGOBuildMode: 'Optimize'
      Release_Arm64:
        buildPlatform: 'arm64'
        buildConfiguration: 'Release'

  variables:
    publishDir : $(Build.ArtifactStagingDirectory)
  steps:
  - template: AzurePipelinesTemplates\WindowsAppSDK-BuildDevProject-Steps.yml
    parameters:
      channel: ${{ variables.channel }}
      runSDLBinaryAnalysis: ${{ parameters.runSDLBinaryAnalysis }}
      enablePREFast: ${{ parameters.enablePREFast }}

  - template: AzurePipelinesTemplates\WindowsAppSDK-PublishProjectOutput-Steps.yml
    parameters:
      GenerateSBOM: false

  - task: PublishBuildArtifacts@1
    displayName: 'Publish BuildOutput'
    inputs:
      artifactName: BuildOutput
      PathtoPublish: '$(buildOutputDir)'

- job: BuildMRT
  pool:
    vmImage: 'windows-latest'
  strategy:
    maxParallel: 10
    matrix:
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
      Release_Arm64:
        buildPlatform: 'ARM64'
        buildConfiguration: 'Release'
  steps:
  - template: build-mrt.yml
    parameters:
      buildJobName: 'BuildMRTCore'
      GenerateSBOM: false
      runSDLBinaryAnalysis: ${{ parameters.runSDLBinaryAnalysis }}
      enablePREFast: ${{ parameters.enablePREFast }}

  - task: PublishBuildArtifacts@1
    displayName: 'Publish BuildOutput'
    inputs:
      artifactName: BuildOutput
      PathtoPublish: '$(buildOutputDir)'

- job: PublishMRT
  dependsOn:
    - BuildMRT
  condition: in(dependencies.BuildMRT.result, 'Succeeded')
  pool:
    vmImage: 'windows-latest'
  steps:
  - template: publish-mrt.yml

- template: AzurePipelinesTemplates\WindowsAppSDK-RunHelixTests-Job.yml
  parameters:
    name: 'RunTestsInHelix'
    dependsOn:
      - Build
      - BuildMRT
    condition: in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues')

# Create Nuget Package
- template: AzurePipelinesTemplates\WindowsAppSDK-CreateNugetPackage-Job.yml
  parameters:
    publishToMaestro: false
    jobName: CreateNugetPackage
    dependsOn:
      - Build
      - PublishMRT
    prereleaseVersionTag: ci
    condition: |
      and
      (
        in(dependencies.PublishMRT.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
        in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
      )
