# see https://docs.microsoft.com/azure/devops/pipelines/process/phases for info on yaml ADO jobs
name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
variables:
- template: WindowsAppSDK-Versions.yml
- template: WindowsAppSDK-CommonVariables.yml
- name: buildOutputDir
  value: $(Build.SourcesDirectory)\BuildOutput

jobs:
- job: PreChecks
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: PowerShell@2
    displayName: 'Smoke test props and targets in \build\NuSpecs'
    inputs:
      targetType: 'inline'
      script: |
        $targetPaths = "$(Build.SourcesDirectory)\build\NuSpecs\*.targets"
        $propPaths = "$(Build.SourcesDirectory)\build\NuSpecs\*.props"
        Get-ChildItem $targetPaths | ForEach-Object { $_.Name; [xml](Get-Content $_) | Out-Null }
        Get-ChildItem $propPaths | ForEach-Object { $_.Name; [xml](Get-Content $_) | Out-Null }
      failOnStderr: true

  # Scans the root source folder for security vulnerability
  - task: CredScan@2
    inputs:
      toolMajorVersion: 'V2'

  # This PostAnalysis will fail the pipeline if CredScan identifies an issue
  - task: PostAnalysis@1
    inputs:
      AllTools: false
      APIScan: false
      BinSkim: false
      CodesignValidation: false
      CredScan: true
      FortifySCA: false
      FxCop: false
      ModernCop: false
      PoliCheck: false
      RoslynAnalyzers: false
      SDLNativeRules: false
      Semmle: false
      TSLint: false
      ToolLogsNotFoundAction: 'Standard'

- job: VerifyCopyrightHeaders
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: powershell@2
    displayName: 'Verify copyright headers'
    inputs:
      targetType: filePath
      filePath: tools\VerifyCopyrightHeaders.ps1

- job: Build
  pool:
    vmImage: 'windows-2022'
  timeoutInMinutes: 120
  strategy:
    maxParallel: 10
    matrix:
      Debug_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Debug'
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
        PGOBuildMode: 'Optimize'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
        PGOBuildMode: 'Optimize'
      Release_Arm64:
        buildPlatform: 'arm64'
        buildConfiguration: 'Release'
  steps:
  - template: AzurePipelinesTemplates\WindowsAppSDK-BuildBinaries-Steps.yml@self
    parameters:
      SignOutput: False

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: Full Nuget'
    inputs:
      PathtoPublish: '$(build.SourcesDirectory)\BuildOutput'
      artifactName: 'BuildOutput'

- job: BuildAnyCPU
  pool:
    vmImage: 'windows-2022'
  steps:
  - template: AzurePipelinesTemplates\WindowsAppSDK-BuildBinaries-AnyCPU-Steps.yml@self
    parameters:
      SignOutput: False

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: Full Nuget'
    inputs:
      PathtoPublish: '$(build.SourcesDirectory)\BuildOutput'
      artifactName: 'BuildOutput'

- job: BuildMRT
  pool:
    vmImage: 'windows-2022'
  strategy:
    maxParallel: 10
    matrix:
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
      Release_Arm64:
        buildPlatform: 'ARM64'
        buildConfiguration: 'Release'
  steps:
  - task: NuGetToolInstaller@1

  - template: AzurePipelinesTemplates\WindowsAppSDK-BuildMRT-Steps.yml
  - template: AzurePipelinesTemplates\WindowsAppSDK-TestMRT-Steps.yml

  - task: PublishBuildArtifacts@1
    displayName: 'Publish BuildOutput'
    inputs:
      artifactName: BuildOutput
      PathtoPublish: '$(buildOutputDir)'

# We no longer run MRT tests in Helix here, due to dwindling Helix support. But one MRT test suite
# is still being run in WindowsAppSDK-BuildAndTestMRT-Steps.yml.

- job: StageAndPack
  pool:
    vmImage: 'windows-2022'
  timeoutInMinutes: 120
  dependsOn:
    - Build
    - BuildMRT
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: BuildOutput
      downloadPath: '$(Build.SourcesDirectory)'

  - template: AzurePipelinesTemplates\WindowsAppSDK-PackNuget-Steps.yml@self
    parameters:
      SignOutput: False


  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: NugetContent'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\BuildOutput\FullNuget'
      artifactName: 'NugetContent'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: TransportPackage'
    inputs:
      PathtoPublish: '$(build.artifactStagingDirectory)\FullNuget'
      artifactName: 'TransportPackage'
