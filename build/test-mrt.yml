parameters:
  MRTBinariesDirectory: $(Build.SourcesDirectory)\BuildOutput
steps:
- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: BuildOutput
    downloadPath: '$(Build.SourcesDirectory)'
  
# Run the test locally on the Azure VM.
- task: VSTest@2
  displayName: 'test MRT: ManagedTests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\MrtCoreManagedTest.build.appxrecipe'
    searchFolder: '${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)\MrtCoreManagedTest'
    testRunTitle: 'test MRT: ManagedTests - $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'test MRT: UnitTests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\MrmUnitTest.dll'
    searchFolder: '${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)\MrmUnitTest'
    testRunTitle: 'test MRT: UnitTests - $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'test MRT: BaseUnitTests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\MrmBaseUnitTests.dll'
    searchFolder: '${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)\MrmBaseUnitTests'
    testRunTitle: 'test MRT: BaseUnitTests - $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'test MRT: UnpackagedTests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\MRTCoreUnpackagedTests.dll'
    searchFolder: '${{ parameters.MRTBinariesDirectory }}\$(buildConfiguration)\$(buildPlatform)\MrtCoreUnpackagedTests'
    testRunTitle: 'test MRT: UnpackagedTests - $(buildPlatform)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'