parameters:
  AssetName: 'Microsoft.ProjectReunion.Foundation.TransportPackage'
  AssetVersion: '0.8.0-main.20210513.0.nightly'
  IsGitHubRepo: true
steps:
  - task: PowerShell@2
    displayName: Build JsonBody 
    inputs:
      targetType: 'inline'
      script: |
        . .\build\maestro\Common.ps1
        
        $jsonBase = @{}

        $assetList = New-Object System.Collections.ArrayList
        $assetList.Add(
          @{
            "name"="${{ parameters.AssetName }}";
            "version"="${{ parameters.AssetVersion }}";
            "nonShipping"=$false;
            "locations"=$null
          }
        )

        # These fields below are unused but can be enabled in the future
        # $locationList = New-Object System.Collections.ArrayList
        # $locationList.Add(@{"location"="maestroTestValue";"type"="none"})

        # $dependenciesList = New-Object System.Collections.ArrayList
        # $dependenciesList.Add(
        #   @{
        #     "buildId"=0;
        #     "isProduct"=$true;
        #     "timeToInclusionInMinutes"=0;
        #   }
        # )

        # $incoherenciesList = New-Object System.Collections.ArrayList
        # $incoherenciesList.Add(
        #   @{
        #     "name"="maestroTestValue";
        #     "version"="maestroTestValue";
        #     "repository"="maestroTestValue";
        #     "commit"="maestroTestValue";
        #   }
        # )

        Write-Host "collectionuri: $(System.CollectionUri)"
        $devOpsAccount = GetOrgNameFromAzureDevOpsCollectionUri '$(System.CollectionUri)'
        Write-Host "reposiitory: $(Build.Repository.Uri)"
        Write-Host "account: " $devOpsAccount
        
        $gitHubRepo = ""
        $azureDevOpsRepo = ""
        if ('${{ parameters.IsGitHubRepo }}' -eq 'true')
        {
          $gitHubRepo = "$(Build.Repository.Uri)"
        }
        if ('${{ parameters.IsGitHubRepo }}' -ne 'true')
        {
          $azureDevOpsRepo = "$(Build.Repository.Uri)"
        }

        $jsonBase = 
          @{
            "commit"="$(Build.SourceVersion)";
            "assets"=$assetList;
            "dependencies"=$null;
            "azureDevOpsBuildId"=$(Build.BuildId);
            "azureDevOpsBuildDefinitionId"=$(System.DefinitionId);
            "azureDevOpsAccount"=$devOpsAccount;
            "azureDevOpsProject"="$(System.TeamProject)";
            "azureDevOpsBuildNumber"="$(Build.BuildNumber)";
            "azureDevOpsRepository"=$azureDevOpsRepo;
            "azureDevOpsBranch"="$(Build.SourceBranch)";
            "gitHubRepository"=$gitHubRepo;
            "gitHubBranch"="$(Build.SourceBranch)";
            "released"=$true;
            "stable"=$true
            "incoherencies"=$null;
          }

        $jsonBase | ConvertTo-Json -Depth 10 | Out-File '$(Build.SourcesDirectory)\build\maestro\maestro-build.json'
        $body = Get-Content -Raw -Path '$(Build.SourcesDirectory)\build\maestro\maestro-build.json'
        Write-host "Writing Json body"
        Write-host $body

  - task: powershell@2
    displayName: 'Post Channel Test'
    inputs:
      targetType: filePath
      filePath: build\maestro\MaestroPostRequest.ps1
      arguments: -url '$(MaestroUri)' -Token '$(MaestroToken)' -api '/api/builds' -queryParameters '' -jsonBodyPath '$(Build.SourcesDirectory)\build\maestro\maestro-build.json'